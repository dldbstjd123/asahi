{"version":3,"sources":["config.js","layout/Navigation.js","route/Home.js","route/About.js","route/Menu.js","route/News.js","route/Reservation.js","layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["exports","domain","Navigation","props","id","to","src","Home","className","About","useState","location","phone","schedule","setSchedule","useEffect","fetch","method","mode","cache","credentials","headers","then","res","json","data","console","log","map","item","key","date","openhour","closehour","Menu","News","Reservation","Footer","n","Date","getFullYear","currentYear","color","size","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kFAAAA,EAAQC,OAAS,8B,oQCmBFC,G,YAfI,SAACC,GAEhB,OACI,yBAAKC,GAAG,uBACJ,kBAAC,IAAD,CAAMA,GAAG,mBAAmBC,GAAG,KAAI,yBAAKD,GAAG,iBAAiBE,IAAI,uBAChE,yBAAKF,GAAG,mBACJ,kBAAC,IAAD,CAAMC,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,gBAAT,oBCEDE,G,MAZF,SAACJ,GACV,OACI,yBAAKK,UAAU,iBACX,yBAAKJ,GAAG,cACJ,yBAAKE,IAAI,wBACT,yBAAKA,IAAI,4B,eCuCVG,G,MA3CD,SAACN,GAAS,IAAD,EACaO,mBAAS,cADtB,mBACZC,EADY,aAEOD,mBAAS,eAFhB,mBAEZE,EAFY,aAGaF,mBAAS,KAHtB,mBAGZG,EAHY,KAGFC,EAHE,KAuBnB,OAjBAC,qBAAU,WACRC,MAAM,GAAD,OAAIf,SAAJ,oBAA8B,CACjCgB,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZX,EAAYW,QAEd,IAGA,yBAAKjB,UAAU,gBAAgBJ,GAAG,kBACvC,0CACA,yBAAKA,GAAG,kBACN,6BAAMO,GACN,6BAAMC,GACLC,EAASe,KAAI,SAACC,GAClB,OACE,yBAAKC,IAAKD,EAAKzB,IACb,6BAAMyB,EAAKE,MACX,6BAAMF,EAAKG,UACX,6BAAMH,EAAKI,mBC5BFC,EARF,SAAC/B,GACV,OACI,yBAAKK,UAAU,mBCMR2B,EARF,SAAChC,GACV,OACI,yBAAKK,UAAU,mBCIR4B,EANK,SAACjC,GACjB,OACI,yBAAKK,UAAU,mB,QCiBR6B,G,MAjBA,SAAClC,GACZ,IACImC,GADI,IAAIC,MACFC,cAFU,EAGgB9B,mBAAS4B,GAHzB,mBAGfG,EAHe,UAIpB,OACI,yBAAKrC,GAAG,mBACJ,yBAAKA,GAAG,mBAAR,kBAAuCqC,EAAvC,qCACA,yBAAKrC,GAAG,yBACJ,6BAAK,kBAAC,IAAD,CAAgBsC,MAAM,OAAOC,KAAK,UACvC,6BAAK,kBAAC,IAAD,CAAiBD,MAAM,OAAOC,KAAK,UACxC,6BAAK,kBAAC,IAAD,CAAqBD,MAAM,OAAOC,KAAK,cCkB7CC,MAnBf,WACE,OACE,yBAAKpC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAM,IAAKC,UAAWxC,IACnC,kBAAC,IAAD,CAAOuC,KAAM,SAAUC,UAAWtC,IAClC,kBAAC,IAAD,CAAOqC,KAAM,QAASC,UAAWb,IACjC,kBAAC,IAAD,CAAOY,KAAM,QAASC,UAAWZ,IACjC,kBAAC,IAAD,CAAOW,KAAM,eAAgBC,UAAWX,KAE1C,yBAAKhC,GAAG,mBACR,kBAAC,EAAD,SCdY4C,QACW,cAA7BC,OAAOtC,SAASuC,UAEe,UAA7BD,OAAOtC,SAASuC,UAEhBD,OAAOtC,SAASuC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.a5a4bd0e.chunk.js","sourcesContent":["exports.domain = \"http://44.235.28.182:3001/\"\n\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport '../css/Navigation.css';\n\nconst Navigation = (props)=>{\n\n    return(\n        <div id='navigationContainer'>\n            <Link id='navigationToHome' to=\"/\"><img id='navigationLogo' src=\"/images/logo3.svg\"/></Link>\n            <div id='navigationLinks'>\n                <Link to=\"/about\">About</Link>\n                <Link to=\"/menu\">Menu</Link>\n                <Link to=\"/news\">News</Link>\n                <Link to=\"/reservation\">Reservations</Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Navigation;","import React from 'react';\nimport '../css/Home.css'\n\nconst Home = (props)=>{\n    return(\n        <div className='bodyContainer'>\n            <div id='mainImages'>\n                <img src=\"/images/combo1.jpeg\" />\n                <img src=\"/images/combo2.jpeg\" />\n            </div>\n        \n        </div>\n    )\n}\n\nexport default Home;","import React, {useState ,useEffect} from 'react';\nimport {domain} from '../config.js'\nimport '../css/About.css'\n\nconst About = (props)=>{\n    const [location, setLocation] = useState('Location!!')\n    const [phone, setPhone] = useState('1-234-5678')\n    const [schedule, setSchedule] = useState([])\n   \n\n    useEffect(()=>{\n      fetch(`${domain}client/hours/get`, {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          console.log(data);\n          setSchedule(data);\n        });\n      },[])    \n\n    return(\n        <div className='bodyContainer' id='aboutContainer'>\n\t  <div>MAP PLACE</div>\n\t  <div id='aboutRightSide'>\n\t    <div>{location}</div>\n\t    <div>{phone}</div>\n\t    {schedule.map((item)=>{\n\t\treturn(\n\t\t  <div key={item.id}>\n\t\t    <div>{item.date}</div>\n\t\t    <div>{item.openhour}</div>\n\t\t    <div>{item.closehour}</div>\n\t\t  </div>\n\t\t)\n\t    })}\n\t  </div>        \n        </div>\n    )\n}\n\nexport default About;\n","import React from 'react';\n\nconst Menu = (props)=>{\n    return(\n        <div className='bodyContainer'>\n        \n        </div>\n    )\n}\n\nexport default Menu;","import React from 'react';\n\nconst News = (props)=>{\n    return(\n        <div className='bodyContainer'>\n        \n        </div>\n    )\n}\n\nexport default News;","import React from 'react';\n\nconst Reservation = (props)=>{\n    return(\n        <div className='bodyContainer'></div>\n    )\n}\n\nexport default Reservation;","import React, {useState} from 'react';\nimport {AiFillFacebook, AiFillInstagram, AiFillTwitterCircle} from 'react-icons/ai';\nimport '../css/Footer.css';\n\nconst Footer = (props)=>{\n    let d = new Date();\n    let n = d.getFullYear();\n    let [currentYear, setCurrentYear] = useState(n)\n    return(\n        <div id='footerContainer'>\n            <div id='footerCopyRight'>Copyright Â© {currentYear} Asahi Sushi All rights reserved.</div>\n            <div id='footerSocialContainer'>\n                <div><AiFillFacebook color=\"gray\" size=\"25px\"/></div>\n                <div><AiFillInstagram color=\"gray\" size=\"25px\"/></div>\n                <div><AiFillTwitterCircle color=\"gray\" size=\"25px\"/></div>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Footer;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport Navigation from \"./layout/Navigation\";\nimport Home from \"./route/Home\";\nimport About from \"./route/About\";\nimport Menu from \"./route/Menu\";\nimport News from \"./route/News\";\nimport Reservation from \"./route/Reservation\";\nimport Footer from \"./layout/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navigation />\n        <Switch>\n          <Route exact path={\"/\"} component={Home} />\n          <Route path={\"/about\"} component={About} />\n          <Route path={\"/menu\"} component={Menu} />\n          <Route path={\"/news\"} component={News} />\n          <Route path={\"/reservation\"} component={Reservation} />\n        </Switch>\n        <div id=\"footerDistance\"></div>\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}