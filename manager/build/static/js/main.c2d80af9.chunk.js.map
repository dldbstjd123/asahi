{"version":3,"sources":["route/Login.js","route/Home.js","route/Menu.js","route/Category.js","route/Reservation.js","route/Hours.js","components/Navigation.js","App.js","serviceWorker.js","index.js","config.js"],"names":["Login","props","history","useHistory","a","username","document","getElementById","value","password","fetch","domain","method","mode","cache","credentials","headers","body","JSON","stringify","then","res","json","fetchData","console","log","status","push","id","name","type","required","onFocus","onBlur","onClick","validateForm","Home","Menu","useState","list","setList","categoryOptions","setCategoryOptions","count","handleChange","event","indexOfEvent","target","getAttribute","currentObject","chosenName","array","splice","useEffect","category","description","price","order","active","style","width","map","item","akey","onChange","selected","key","files","Category","optionTo20","setOptionTo20","onChangeHandler","changeAddData","updateHandler","targetOfList","window","location","reload","deleteHandler","preventDefault","sort","i","prev","data","fontSize","textAlign","marginTop","onSubmit","Reservation","Hours","schedule","setSchedule","theIndex","selectedIndex","date","openhour","closehour","Navigation","className","to","logout","path","component","App","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message","exports"],"mappings":"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","file":"static/js/main.c2d80af9.chunk.js","sourcesContent":["import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport '../css/Login.css';\nimport {domain} from '../config';\n//import {webSiteURL} from '../../../ignore/config.js';\n\nconst Login = (props)=>{\n    const history = useHistory();\n\n    async function validateForm(){\n        let username = document.getElementById('accountId').value\n        let password = document.getElementById('password').value\n        \n        try{\n            \n            let fetchData = await fetch(`${domain}admin/login`, {\n                method: 'POST',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                headers: {\n                'Content-Type':'application/json'\n                },\n                body: JSON.stringify({username,password})\n            })\n            .then(res => res.json())\n            console.log(fetchData)\n            if(fetchData.status == 'succeed'){\n                history.push('/admin/home')\n            } \n            \n        }catch(err){throw err}\n\t\n    }\n    return(\n        <div id='loginContainer'>\n            <div>Asahi Admin Login</div>\n\t    <form name=\"loginForm\" >\n            <label>USERNAME</label>\n            <input type=\"text\" id=\"accountId\" name=\"accountId\" required onFocus={() =>console.log('clicked')} onBlur={() => console.log('out')} />\n            <label>PASSWORD</label>\n            <input type=\"password\" id=\"password\" name=\"password\" required onFocus={() =>console.log('clicked')} onBlur={() => console.log('out')} />\n            <input type=\"button\" value=\"Login\" onClick={()=> validateForm()}/>\n\t    </form>    \n        </div>\n    )\n}\n\nexport default Login;\n","import React from 'react';\nimport {Switch, Route} from 'react-router-dom'\nimport Navigation from '../components/Navigation';\n\nconst Home = ()=>{\n    return(\n        <div>\n            Home Page\n        </div>\n    )\n}\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { domain } from \"../config\";\n\nconst Menu = () => {\n  const [list, setList] = useState([]);\n  const [categoryOptions, setCategoryOptions] = useState();\n  let count = 0;\n\n  function handleChange(event) {\n    let indexOfEvent = event.target.getAttribute(\"akey\");\n    console.log(`indexOfEvent = ${indexOfEvent}`);\n    let currentObject = list[indexOfEvent];\n    console.log(`currentObject = ${currentObject}`);\n    let chosenName = event.target.name;\n    currentObject[chosenName] = event.target.value;\n    //console.log(currentObject)\n    setList((array) => {\n      console.log(\"1\", array);\n      array.splice(indexOfEvent, 1, currentObject);\n      return [...array];\n    });\n    //console.log(list)\n  }\n  useEffect(() => {\n    console.log(\"useEffect\");\n    setList((array) => {\n      count++;\n      return [\n        ...array,\n        {\n          count: count,\n          id: 35,\n          category: 3,\n          name: \"salmon roll\",\n          description: \"good!\",\n          price: 35,\n          order: 1,\n          active: false,\n        },\n        {\n          count: 2,\n          id: 36,\n          category: 3,\n          name: \"egg roll\",\n          description: \"good!\",\n          price: 20,\n          order: 2,\n          active: true,\n        },\n      ];\n    });\n    //get Category and make option lists\n    setCategoryOptions(\n      <>\n        <option value=\"roll\">roll</option>\n        <option value=\"roll\">drink</option>\n      </>\n    );\n    // try {\n    //   //const doWork = await fetch(`${domain}/`);\n    // } catch (err) {\n    //   throw err;\n    // }\n  }, []);\n  return (\n    <div>\n      <div>Menu Page</div>\n      <div>\n        <form>\n          <table style={{ width: \"100%\" }}>\n            <tbody>\n              <tr>\n                <th>No.</th>\n                <th>Category</th>\n                <th>Name</th>\n                <th>Description</th>\n                <th>Price</th>\n                <th>Order</th>\n                <th>Image</th>\n                <th>Active</th>\n                <th></th>\n                <th></th>\n              </tr>\n              {list.map((item) => {\n                let activeSelect = \"\";\n                if (item.active) {\n                  activeSelect = (\n                    <select\n                      akey={item.count - 1}\n                      name=\"active\"\n                      onChange={handleChange}\n                    >\n                      <option value=\"true\">yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                  );\n                } else {\n                  activeSelect = (\n                    <select\n                      akey={item.count - 1}\n                      name=\"active\"\n                      onChange={handleChange}\n                    >\n                      <option value=\"true\">yes</option>\n                      <option selected value=\"false\">\n                        No\n                      </option>\n                    </select>\n                  );\n                }\n                return (\n                  <tr key={item.id}>\n                    <td>{item.count}</td>\n                    <td>\n                      <select\n                        akey={item.count - 1}\n                        name=\"category\"\n                        onChange={handleChange}\n                        value={item.category}\n                      >\n                        {categoryOptions}\n                      </select>\n                    </td>\n                    <td>\n                      <input\n                        akey={item.count - 1}\n                        type=\"text\"\n                        name=\"name\"\n                        required\n                        value={item.name}\n                        onChange={handleChange}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        akey={item.count - 1}\n                        type=\"text\"\n                        name=\"description\"\n                        required\n                        value={item.description}\n                        onChange={handleChange}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        akey={item.count - 1}\n                        type=\"text\"\n                        name=\"price\"\n                        required\n                        value={item.price}\n                        onChange={handleChange}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        akey={item.count - 1}\n                        type=\"text\"\n                        name=\"order\"\n                        required\n                        value={item.order}\n                        onChange={handleChange}\n                      />\n                    </td>\n                    <td>\n                        <input \n                            akey={item.count - 1}\n                            type=\"file\"\n                            name=\"image\"\n                            onChange={(event)=>{console.log(event.target.files[0].name)}}\n                        />\n                    </td>\n                    <td>\n                      <select\n                        akey={item.count - 1}\n                        name=\"active\"\n                        onChange={handleChange}\n                        value={item.active}\n                      >\n                        <option value=\"true\">yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                    </td>\n                    <td>Update</td>\n                    <td>Delete</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React, { useState, useEffect } from \"react\";\nimport { domain } from \"../config\";\n\nconst Category = () => {\n  const [list, setList] = useState([]);\n  const [addData, setAddData] = useState();\n  const [optionTo20, setOptionTo20] = useState([]);\n  let count = 0;\n\n  function onChangeHandler(event) {\n    let indexOfEvent = event.target.getAttribute(\"akey\");\n    console.log(`indexOfEvent = ${indexOfEvent}`);\n    let currentObject = list[indexOfEvent];\n    console.log(`currentObject = ${currentObject}`);\n    let chosenName = event.target.name;\n    currentObject[chosenName] = event.target.value;\n    //console.log(currentObject)\n    setList((array) => {\n      console.log(\"1\", array);\n      array.splice(indexOfEvent, 1, currentObject);\n      return [...array];\n    });\n  }\n  function changeAddData(event) {\n    console.log(event.target.name);\n    console.log(event.target.value);\n  }\n\n  async function updateHandler(event) {\n    let targetOfList = event.target.getAttribute(\"akey\");\n    console.log(list[targetOfList]);\n\n    const doWork = await fetch(`${domain}admin/category/update`, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(list[targetOfList]),\n    });\n    window.location.reload();\n  }\n\n  async function deleteHandler(event) {\n    let targetOfList = event.target.getAttribute(\"akey\");\n    console.log(list[targetOfList]);\n\n    const doWork = await fetch(`${domain}admin/category/delete`, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(list[targetOfList]),\n    });\n    window.location.reload();\n  }\n  async function addHandler(event) {\n    event.preventDefault();\n\n    const doWork = await fetch(`${domain}admin/category/add`, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: event.target.name.value,\n        sort: event.target.sort.value,\n      }),\n    });\n    window.location.reload();\n    console.log(event.target.name.value);\n  }\n  //   function makeOptions(n){\n  //     let option\n  //     for(let i=1; i<n; i++){\n  //         if(option == undefined){\n  //             option = <option value=\"${i}\">${i}</option>\n  //         }else{\n  //             option += <option value=\"${i}\">${i}</option>\n  //         }\n  //     }\n  //     console.log(option)\n  //     return <>{option}</>\n  //   }\n\n  useEffect(() => {\n    for (let i = 1; i < 21; i++) {\n      setOptionTo20((prev) => {\n        return [...prev, <option key={i} value={i}>{i}</option>];\n      });\n    }\n    fetch(`${domain}admin/category/get`, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setList(data);\n      });\n  }, []);\n  return (\n    <div>\n      <div style={{ fontSize: \"20px\", textAlign: \"left\" }}>Category Page</div>\n      <div>\n        <form>\n          <table style={{ width: \"100%\" }}>\n            <tbody>\n              <tr>\n                <th>No.</th>\n                <th>Name</th>\n                <th>Sort</th>\n                <th></th>\n                <th></th>\n              </tr>\n              {list.map((item) => {\n                count++;\n                return (\n                  <tr key={item.id}>\n                    <td>{item.id}</td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        akey={count - 1}\n                        name=\"name\"\n                        value={item.name}\n                        required\n                        onChange={onChangeHandler}\n                      />\n                    </td>\n                    <td>\n                      <select \n                        akey={count - 1}\n                        name=\"sort\"\n                        value={item.sort}\n                        required\n                        onChange={onChangeHandler}\n                      >\n                          {optionTo20}\n                        </select>\n                    </td>\n                    <td>\n                      <input\n                        type=\"button\"\n                        akey={count - 1}\n                        value=\"Update\"\n                        onClick={updateHandler}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"button\"\n                        akey={count - 1}\n                        value=\"Delete\"\n                        onClick={deleteHandler}\n                      />\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </form>\n        <div style={{ fontSize: \"20px\", textAlign: \"left\", marginTop: \"20px\" }}>\n          Add\n        </div>\n        <form onSubmit={addHandler}>\n          <table>\n            <tbody>\n              <tr>\n                <th>Name</th>\n                <th>Sort</th>\n                <th></th>\n              </tr>\n              <tr>\n                <td>\n                  <input type=\"text\" name=\"name\" onChange={changeAddData} />\n                </td>\n                <td>\n                  <select name=\"sort\" onChange={changeAddData}>\n                    {optionTo20}\n                  </select>\n                </td>\n                <td>\n                  <button type=\"submit\">ADD</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Category;\n","import React from 'react';\n\nconst Reservation = ()=>{\n    return(\n        <div>\n            Reservation Page\n\n        </div>\n    )\n}\n\nexport default Reservation;\n","import React, { useState, useEffect } from \"react\";\nimport { domain } from \"../config\";\n\nconst Hours = () => {\n  const [schedule, setSchedule] = useState([]);\n  let count = 0;\n\n  useEffect(() => {\n    fetch(`${domain}admin/hours/get`, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        setSchedule(data);\n      });\n\n    console.log(schedule);\n  }, []);\n\n  function onChangeHandler(event) {\n    let theIndex = event.target.getAttribute(\"akey\");\n    let selectedIndex = schedule[theIndex];\n    selectedIndex[event.target.name] = event.target.value;\n    setSchedule((array) => {\n      console.log(\"1\", array);\n      array.splice(theIndex, 1, selectedIndex);\n      return [...array];\n    });\n  }\n\n  async function updateHandler() {\n    const doWork = await fetch(`${domain}admin/hours/update`, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(schedule),\n    });\n    window.location.reload();\n  }\n  return (\n    <div>\n      <div>Category Page</div>\n      <div>\n        <form>\n          <table style={{ width: \"100%\" }}>\n            <tbody>\n              <tr>\n                <th></th>\n                <th>Open time</th>\n                <th>Close time</th>\n              </tr>\n              {schedule.map((item) => {\n                count++;\n                return (\n                  <tr key={item.id}>\n                    <td>{item.date}</td>\n                    <td>\n                      <input\n                        akey={count - 1}\n                        type=\"text\"\n                        name=\"open\"\n                        value={item.openhour}\n                        onChange={onChangeHandler}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        akey={count - 1}\n                        type=\"text\"\n                        name=\"close\"\n                        value={item.closehour}\n                        onChange={onChangeHandler}\n                      />\n                    </td>\n                    <td>\n                      <select\n                        akey={count - 1}\n                        name=\"status\"\n                        value={item.status}\n                        onChange={onChangeHandler}\n                      >\n                        <option value={1}>Open</option>\n                        <option value={0}>Closed</option>\n                      </select>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          <div>\n            <input type=\"button\" value=\"UPDATE\" onClick={updateHandler} />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Hours;\n","import React from \"react\";\nimport { Link, Switch, Route, useHistory } from \"react-router-dom\";\nimport {domain} from '../config';\nimport \"../css/Navigation.css\";\n\nimport Home from \"../route/Home\";\nimport Menu from \"../route/Menu\";\nimport Category from \"../route/Category\";\nimport Reservation from \"../route/Reservation\";\nimport Hours from \"../route/Hours\";\n\nconst Navigation = () => {\n  const history = useHistory();\n\n  async function logout(){\n      try{\n        const doWork = await fetch(`${domain}admin/logout`, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n            'Content-Type':'application/json'\n            }\n        })\n        .then(res => res.json())\n        if(doWork.status == 'succeed'){\n            history.push('/admin')\n        } \n      }catch(err){\n          throw err\n      }\n  }\n  return (\n    <div id=\"navigationContainer\">\n      <div id=\"linkContainer\">\n        <Link className=\"links\" to={`/admin/home`}>\n          Home\n        </Link>\n        <Link className=\"links\" to={`/admin/menu`}>\n          Menu\n        </Link>\n        <Link className=\"links\" to={`/admin/category`}>\n          Category\n        </Link>\n        <Link className=\"links\" to={`/admin/reservation`}>\n          Reservation\n        </Link>\n        <Link className=\"links\" to={`/admin/hours`}>\n          Hours\n        </Link>\n        \n      </div>\n      <div id='mainContainer'>\n        <div id='topNavigation'>\n            <button type='button' onClick={()=>{logout()}}>logout</button>\n        </div>\n        <Switch>\n          <Route path={\"/admin/home\"} component={Home} />\n          <Route path={\"/admin/menu\"} component={Menu} />\n          <Route path={\"/admin/category\"} component={Category} />\n          <Route path={\"/admin/reservation\"} component={Reservation} />\n          <Route path={\"/admin/hours\"} component={Hours} />\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nimport './App.css';\nimport Login from './route/Login.js';\nimport Navigation from './components/Navigation.js';\nimport Home from './route/Home.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path={\"/admin\"} component={Login} />\n          <Route path={\"/admin\"}>\n            <Navigation />\n            {/* <Home /> */}\n          </Route>\n        </Switch>\n        <div id='footerDistance'></div>\n      </Router>\n  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","exports.domain = \"http://localhost:3001/\""],"sourceRoot":""}